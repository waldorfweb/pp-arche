{"version":3,"sources":["webpack:///./node_modules/Ceres/resources/js/src/app/components/item/VariationSelect.vue?917c","webpack:///node_modules/Ceres/resources/js/src/app/components/item/VariationSelect.vue","webpack:///./node_modules/Ceres/resources/js/src/app/components/item/VariationSelect.vue?c559","webpack:///./node_modules/Ceres/resources/js/src/app/components/item/VariationSelect.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attributes","length","Object","keys","possibleUnits","isContentVisible","staticClass","_l","attribute","type","ref","refInFor","on","change","$event","selectAttribute","attributeId","target","value","addPleaseSelectOption","hasSelection","domProps","_v","_s","$translate","_e","hasEmptyOption","selectedAttributes","selected","values","attributeValueId","isAttributeSelectionValid","name","directives","rawName","isTextCut","expression","attrs","title","getSelectedAttributeValueName","class","images","active","invalid","click","getInvalidOptionTooltip","src","imageUrl","alt","selectUnit","unit","unitId","parseInt","selectedUnit","isUnitSelectionValid","_t","_withStripped","NotificationService","props","forceContent","Boolean","default","inject","itemId","data","filteredVariationsCache","lastContentCount","$store","commit","currentSelection","computed","getters","state","items","variationSelect","variations","some","variation","App","config","item","showPleaseSelect","filteredVariations","filterVariations","unitCombinationId","unitName","currentVariationSelect","units","methods","onSelectionChange","setVariation","variationId","unsetInvalidSelection","qualifiedVariations","getQualifiedVariations","closestVariation","getClosestVariation","invalidSelection","getInvalidSelectionByVariation","correctSelection","names","attributesToReset","push","newUnit","join","filter","find","numberOfRequiredChanges","changes","selectedAttributeId","variationAttribute","attributeToReset","attr","messages","JSON","parse","stringify","warn","closeAfter","strict","ignoreUnit","key","uniqueValues","Set","isEmptyOptionSelected","dispatch","then","document","dispatchEvent","CustomEvent","detail","documents","content","$refs","attributesContaner","clientWidth","selectedAttributeValueId","selectedAttributeValue","attrValue","watch","component","options","__file"],"mappings":"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","file":"chunks/ceres-38.min.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _vm.attributes.length ||\n    (Object.keys(_vm.possibleUnits).length > 1 && _vm.isContentVisible)\n      ? _c(\n          \"div\",\n          { staticClass: \"row\" },\n          [\n            _vm._l(_vm.attributes, function(attribute) {\n              return _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                attribute.type === \"dropdown\"\n                  ? _c(\n                      \"div\",\n                      {\n                        ref: \"attributesContaner\",\n                        refInFor: true,\n                        staticClass: \"input-unit\"\n                      },\n                      [\n                        _c(\n                          \"select\",\n                          {\n                            staticClass: \"custom-select\",\n                            on: {\n                              change: function($event) {\n                                return _vm.selectAttribute(\n                                  attribute.attributeId,\n                                  $event.target.value\n                                )\n                              }\n                            }\n                          },\n                          [\n                            _vm.addPleaseSelectOption || !_vm.hasSelection\n                              ? _c(\"option\", { domProps: { value: -1 } }, [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.$translate(\n                                        \"Ceres::Template.singleItemPleaseSelect\"\n                                      )\n                                    )\n                                  )\n                                ])\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption ||\n                            _vm.selectedAttributes[attribute.attributeId] ===\n                              null\n                              ? _c(\n                                  \"option\",\n                                  {\n                                    domProps: {\n                                      value: null,\n                                      selected:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null\n                                    }\n                                  },\n                                  [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function(value) {\n                              return _c(\n                                \"option\",\n                                {\n                                  domProps: {\n                                    value: value.attributeValueId,\n                                    selected:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ]\n                                  }\n                                },\n                                [\n                                  _vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(value.name) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                    : [\n                                        _vm._v(\n                                          \"\\n                            \" +\n                                            _vm._s(\n                                              _vm.$translate(\n                                                \"Ceres::Template.singleItemInvalidAttribute\",\n                                                { name: value.name }\n                                              )\n                                            ) +\n                                            \"\\n                        \"\n                                        )\n                                      ]\n                                ],\n                                2\n                              )\n                            })\n                          ],\n                          2\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"label\",\n                          {\n                            directives: [\n                              {\n                                name: \"tooltip\",\n                                rawName: \"v-tooltip\",\n                                value: _vm.isTextCut(attribute.name),\n                                expression: \"isTextCut(attribute.name)\"\n                              }\n                            ],\n                            attrs: {\n                              \"data-toggle\": \"tooltip\",\n                              \"data-placement\": \"top\",\n                              title: attribute.name\n                            }\n                          },\n                          [_vm._v(_vm._s(attribute.name))]\n                        )\n                      ]\n                    )\n                  : attribute.type === \"box\" || attribute.type === \"image\"\n                  ? _c(\"div\", [\n                      _c(\"span\", { staticClass: \"text-muted\" }, [\n                        _vm._v(_vm._s(attribute.name) + \":\")\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"b\", [\n                        _vm._v(\n                          _vm._s(_vm.getSelectedAttributeValueName(attribute))\n                        )\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"v-s-boxes py-3\",\n                          class: { images: attribute.type === \"image\" }\n                        },\n                        [\n                          _vm.addPleaseSelectOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === -1,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      -1\n                                    )\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        -1\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.hasEmptyOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === null,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      null\n                                    )\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        null\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm._l(attribute.values, function(value) {\n                            return _c(\n                              \"div\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"tooltip\",\n                                    rawName: \"v-tooltip\",\n                                    value: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    ),\n                                    expression:\n                                      \"!isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\"\n                                  }\n                                ],\n                                staticClass: \"v-s-box bg-white\",\n                                class: {\n                                  active:\n                                    value.attributeValueId ===\n                                    _vm.selectedAttributes[\n                                      attribute.attributeId\n                                    ],\n                                  invalid: !_vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                },\n                                attrs: {\n                                  \"data-html\": \"true\",\n                                  \"data-toggle\": \"tooltip\",\n                                  \"data-placement\": \"top\",\n                                  \"data-original-title\": _vm.getInvalidOptionTooltip(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.selectAttribute(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    )\n                                  }\n                                }\n                              },\n                              [\n                                attribute.type === \"box\"\n                                  ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(_vm._s(value.name))\n                                    ])\n                                  : _c(\"img\", {\n                                      staticClass: \"p-1\",\n                                      attrs: {\n                                        src: value.imageUrl,\n                                        alt: value.name\n                                      }\n                                    })\n                              ]\n                            )\n                          })\n                        ],\n                        2\n                      )\n                    ])\n                  : _vm._e()\n              ])\n            }),\n            _vm._v(\" \"),\n            Object.keys(_vm.possibleUnits).length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        on: {\n                          change: function($event) {\n                            return _vm.selectUnit($event.target.value)\n                          }\n                        }\n                      },\n                      _vm._l(_vm.possibleUnits, function(unit, unitId) {\n                        return _c(\n                          \"option\",\n                          {\n                            domProps: {\n                              value: unitId,\n                              selected: parseInt(unitId) === _vm.selectedUnit\n                            }\n                          },\n                          [\n                            _vm.isUnitSelectionValid(unitId)\n                              ? [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(unit) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                              : [\n                                  _vm._v(\n                                    \"\\n                            \" +\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemInvalidAttribute\",\n                                          { name: unit }\n                                        )\n                                      ) +\n                                      \"\\n                        \"\n                                  )\n                                ]\n                          ],\n                          2\n                        )\n                      }),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\"label\", [\n                      _vm._v(\n                        _vm._s(\n                          _vm.$translate(\"Ceres::Template.singleItemContent\")\n                        )\n                      )\n                    ])\n                  ])\n                ])\n              : _vm._e()\n          ],\n          2\n        )\n      : _c(\"div\", [_vm._t(\"default\")], 2)\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div>\n        <div v-if=\"attributes.length || (Object.keys(possibleUnits).length > 1 && isContentVisible)\" class=\"row\">\n            <div class=\"col-12 variation-select\" v-for=\"attribute in attributes\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\">{{ attribute.name }}:</span> <b>{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId) }\"\n                             v-tooltip=\"!isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getInvalidOptionTooltip(attribute.attributeId, value.attributeValueId)\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"Object.keys(possibleUnits).length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select class=\"custom-select\" @change=\"selectUnit($event.target.value)\">\n                        <option\n                                v-for=\"(unit, unitId) in possibleUnits\"\n                                :value=\"unitId\"\n                                :selected=\"parseInt(unitId) === selectedUnit\">\n                            <template v-if=\"isUnitSelectionValid(unitId)\">\n                                {{ unit }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": unit }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label>{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </div>\n\n        <div v-else>\n            <slot></slot>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        units() {\n            return this.currentVariationSelect && this.currentVariationSelect.units;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = Object.keys(this.possibleUnits).length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariation    = this.getClosestVariation(qualifiedVariations);\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        /**\n         * returns a string for box tooltips, for not availble options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariation    = this.getClosestVariation(qualifiedVariations);\n\n            if (!closestVariation)\n            {\n                return \"\";\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * returns a variation, where a minimum of changes in the selection is required to archive\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariation(qualifiedVariations)\n        {\n            let closestVariation;\n            let numberOfRequiredChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    changes++;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if (!numberOfRequiredChanges || changes < numberOfRequiredChanges)\n                {\n                    closestVariation = variation;\n                    numberOfRequiredChanges = changes;\n                }\n            }\n\n            return closestVariation;\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && Object.keys(this.possibleUnits).length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n\n            return !!this.filterVariations(selectedAttributes, null, null, ignoreUnit).length;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return !!this.filterVariations(null, unitId).length;\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        }\n    }\n}\n</script>\n","import mod from \"-!../../../../../../../vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../../vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=761e51cf&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/alex/Documents/GitHub/own-Git-waldorfweb/ArcheNS/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('761e51cf')) {\n      api.createRecord('761e51cf', component.options)\n    } else {\n      api.reload('761e51cf', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=761e51cf&\", function () {\n      api.rerender('761e51cf', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"node_modules/Ceres/resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports"],"sourceRoot":""}